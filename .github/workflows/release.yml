name: Auto Publish

permissions:
  contents: write

on:
  push:
    branches: [main]
    paths:
      - "src-tauri/tauri.conf.json"
  workflow_dispatch: {}

jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.chk.outputs.changed }}
      new_version: ${{ steps.chk.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: chk
        run: |
          set -euo pipefail
          git fetch --tags --force >/dev/null 2>&1 || true
          NEW_V="$(jq -r '.version // empty' src-tauri/tauri.conf.json)"
          LAST_TAG="$(git tag -l --sort=-v:refname | head -n1 || true)"
          OLD_V=""; [ -n "${LAST_TAG:-}" ] && OLD_V="${LAST_TAG#v}"
          echo "changed=$([ -n "$NEW_V" ] && [ "$NEW_V" != "$OLD_V" ] && echo true || echo false)" >> "$GITHUB_OUTPUT"
          echo "new_version=$NEW_V" >> "$GITHUB_OUTPUT"

  prepare-release:
    needs: detect-version
    if: needs.detect-version.outputs.changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.mk.outputs.release_id }}
      tag: v${{ needs.detect-version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: mk
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TAG="v${{ needs.detect-version.outputs.new_version }}"
          # 已存在就复用；不存在就创建（可改成 --draft/--prerelease）
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" --title "$TAG" --notes "Auto release"
          fi
          # 取 release id 输出给后续 job
          RID="$(gh release view "$TAG" --json id -q .id)"
          echo "release_id=$RID" >> "$GITHUB_OUTPUT"

  publish:
    needs: [detect-version, prepare-release]
    if: needs.detect-version.outputs.changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            args: ""
          - os: windows-latest
            args: "-b nsis"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install deps (bun)
        run: bun install --frozen-lockfile
      - name: Build & Upload to existing release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ github.token }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          # 只上传，不再创建（关键：用 releaseId）
          releaseId: ${{ needs.prepare-release.outputs.release_id }}
          includeUpdaterJson: true
          args: ${{ matrix.args }}

  no-change:
    needs: detect-version
    if: needs.detect-version.outputs.changed != 'true'
    runs-on: ubuntu-latest
    steps:
      - run: echo "version not changed"
