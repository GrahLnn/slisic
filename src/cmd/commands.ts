/* eslint-disable */

export type EventsShape<T extends Record<string, any>> = {
  [K in keyof T]: __EventObj__<T[K]> & {
    (handle: __WebviewWindow__): __EventObj__<T[K]>;
  };
};

export function makeLievt<T extends Record<string, any>>(ev: EventsShape<T>) {
  return function lievt<K extends keyof T>(key: K) {
    return (handler: (payload: T[K]) => void) => {
      const obj = ev[key] as __EventObj__<T[K]>;
      return obj.listen((e) => handler(e.payload));
    };
  };
}

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async exists(path: string) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("exists", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async allAudioRecursive(folder: string) : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("all_audio_recursive", { folder }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async resolveSavePath() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("resolve_save_path") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateSavePath(newPath: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_save_path", { newPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async appReady() : Promise<void> {
    await TAURI_INVOKE("app_ready");
},
async getMouseAndWindowPosition() : Promise<Result<MouseWindowInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_mouse_and_window_position") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ytdlpDownloadAndInstall() : Promise<Result<InstallResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ytdlp_download_and_install") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ytdlpCheckUpdate() : Promise<Result<CheckResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ytdlp_check_update") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkExists() : Promise<Result<InstallResult | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_exists") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async githubOk() : Promise<boolean> {
    return await TAURI_INVOKE("github_ok");
},
async lookMedia(url: string) : Promise<Result<MediaInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("look_media", { url }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * 开发内测命令：下载给定播放列表（只音频 bestaudio）
 * 保存目录固定为 C:\Users\admin\Documents\test
 */
async testDownloadAudio() : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("test_download_audio") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ffmpegCheckUpdate() : Promise<Result<FfCheck, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ffmpeg_check_update") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ffmpegDownloadAndInstall() : Promise<Result<InstallResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ffmpeg_download_and_install") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ffmpegVersion() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ffmpeg_version") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ffmpegCheckExists() : Promise<Result<InstallResult | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ffmpeg_check_exists") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async create(data: CollectMission) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create", { data }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async read(name: string) : Promise<Result<Playlist, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read", { name }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readAll() : Promise<Result<Playlist[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_all") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async update(data: CollectMission, anchor: Playlist) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update", { data, anchor }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async delete(name: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete", { name }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async fatigue(music: Music) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("fatigue", { music }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async boost(music: Music) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("boost", { music }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async cancleBoost(music: Music) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("cancle_boost", { music }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async cancleFatigue(music: Music) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("cancle_fatigue", { music }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async unstar(list: Playlist, music: Music) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("unstar", { list, music }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async resetLogits() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("reset_logits") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteMusic(music: Music) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_music", { music }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async recheckFolder(entry: Entry) : Promise<Result<Entry, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("recheck_folder", { entry }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async rmexclude(list: Playlist, music: Music) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("rmexclude", { list, music }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateWeblist(entry: Entry, playlist: string) : Promise<Result<Entry, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_weblist", { entry, playlist }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
fullScreenEvent: FullScreenEvent,
processMsg: ProcessMsg,
processResult: ProcessResult,
ytdlpVersionChanged: YtdlpVersionChanged
}>({
fullScreenEvent: "full-screen-event",
processMsg: "process-msg",
processResult: "process-result",
ytdlpVersionChanged: "ytdlp-version-changed"
})

/** user-defined constants **/



/** user-defined types **/

export type CheckResult = { installed_path: string | null; installed_version: string | null; latest_version: string | null; needs_update: boolean; asset_name: string; download_url: string }
export type CollectMission = { name: string; folders: FolderSample[]; links: LinkSample[]; entries: Entry[]; exclude: Music[] }
export type Entry = { path: string | null; name: string; musics: Music[]; avg_db: number | null; url: string | null; downloaded_ok: boolean | null; tracking: boolean | null; entry_type: EntryType }
export type EntryType = "Local" | "WebList" | "WebVideo" | "Unknown"
export type FfCheck = { installed_path: string | null; latest_tag: string | null; needs_install: boolean; asset_name: string | null; download_url: string | null; note: string | null }
export type FolderSample = { path: string; items: string[] }
export type FullScreenEvent = { is_fullscreen: boolean }
export type InstallResult = { installed_path: string; installed_version: string }
export type LinkSample = { url: string; title_or_msg: string; entry_type: EntryType; count: number | null; status: LinkStatus | null; tracking: boolean }
export type LinkStatus = "Ok" | "Err"
export type MediaInfo = { title: string; item_type: string; entries_count: number | null }
export type MouseWindowInfo = { mouse_x: number; mouse_y: number; window_x: number; window_y: number; window_width: number; window_height: number; rel_x: number; rel_y: number; pixel_ratio: number }
export type Music = { path: string; title: string; avg_db: number | null; base_bias: number; user_boost: number; fatigue: number; diversity: number }
export type Playlist = { name: string; avg_db: number | null; entries: Entry[]; exclude: Music[] }
export type ProcessMsg = { playlist: string; str: string }
export type ProcessResult = { working_path: string; saved_path: string; name: string; playlist: string }
export type YtdlpVersionChanged = { str: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
